data <- read.csv("rsa_high_hw.txt", header="T")
data <- read.csv("rsa_high_hw.txt", header=T)
data <- read.csv2("rsa_high_hw.txt", header=T)
data <- read.csv2("rsa_high_hw.txt", header=T)
hist(data$time)
data <- read.csv2("rsa_high_hw.txt", header=T)
hist(data$time)
data <- read.csv2("rsa_high_hw.txt", header=T)
hist(data$time)
times <- data$TIME
times <- unlist(data$TIME)
hist(data$time)
times <- unlist(data$TIME) / 10000
data <- read.csv2("rsa_high_hw.txt", header=T)
times <- data$TIME / 100
times <- data$TIME / 10
times <- data$TIME
data <- read.csv2("rsa_high_hw.txt", header=T)
times <- data$TIME
time
timess
times
times <- unlist(data$TIME)
times
times
data <- read.csv2("rsa_high_hw.txt", header=T)
times <- unlist(data$TIME)
times
times <- as.numeric(unlist(data$TIME))
times
hist(times)
times
data <- read.csv2("rsa_high_hw.txt", header=T)
times <- as.numeric(unlist(data$TIME))
times
hist(times)
data <- read.csv2("rsa_high_hw.txt", header=T)
data$TIME
hist(data$TIME)
times <- as.numeric(data$TIME)
as.numeric(levels(data$TIME))[data$TIME]
times <- as.numeric(levels(data$TIME))[data$TIME]
hist(data$TIME)
data <- read.csv2("rsa_high_hw.txt", header=T)
data$TIME
times <- as.numeric(levels(data$TIME))[data$TIME]
hist(times)
times <- as.numeric(levels(data$TIME))[data$TIME < data$TIME < max(data$TIME)]
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)]
times <- head(sort(times), 10000)
hist(times)
times <- times[times < max(times)] / 1000000
hist(times)
data <- read.csv2("rsa_high_hw.txt", header=T)
data$TIME
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
hist(times)
times <- head(sort(times,15000))
hist(times)
times <- head(sort(times)15000)
hist(times)
times <- head(sort(times),15000)
hist(times)
times <- head(sort(times),19000)
hist(times)
times <- head(sort(times),10000)
hist(times)
data <- read.csv2("rsa_high_hw.txt", header=T)
data$TIME
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
times <- head(sort(times),10000)
hist(times)
data <- read.csv2("rsa_high_hw.txt", header=T)
data$TIME
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- head(sort(times),19000)
times <- times[times < max(times)] / 1000000
hist(times)
data <- read.csv2("rsa_high_hw.txt", header=T)
data$TIME
times <- times[times < max(times)] / 1000000
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- head(sort(times),19500)
hist(times)
data <- read.csv2("rsa_high_hw.txt", header=T)
data$TIME
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
times <- head(sort(times),19500)
hist(times)
times
hist(times, col="blue")
hist(times, col="lightblue")
hist(times, col="lightblue", title = "Histogram of time necessary to decrypt with high HW expo")
hist(times, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp")
hist(times, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
plot(times)
data <- read.csv2("rsa_high_hw.txt", header=T)
data$TIME
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
timesSorted <- head(sort(times),19500)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
plot(times)
plot(times, type="h")
plot(times, type="h", col="lightblue")
plot(times, type="h", col="blue")
data <- read.csv2("rsa_high_hw.txt", header=T)
data$TIME
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
timesSorted <- head(sort(times),19900)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
plot(times, type="h", col="blue")
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
data <- read.csv2("rsa_high_hw.txt", header=T)
data$TIME
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
timesSorted <- head(sort(times),19850)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
data <- read.csv2("rsa_high_hw.txt", header=T)
data$TIME
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
timesSorted <- head(sort(times),19800)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
plot(times, type="h", col="blue")
times
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
save.image("rsa_high_hw_encryption_hist.jpg")
plot(times, type="h", col="blue")
data<- read.csv2("ecc_random_exp.txt", header=T)
data<- read.csv2("ecc_random_exp.txt", header=T)
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
timesSorted <- head(sort(times),19800)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
hist(times, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
timesSorted <- head(sort(times),19800)
hist(times, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances",breaks="fd")
data <- read.csv2("rsa_high_hw.txt", header=T)
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
timesSorted <- head(sort(times),19800)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances")
data<- read.csv2("ecc_random_exp.txt", header=T)
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
timesSorted <- head(sort(times),19800)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances",breaks="fd")
save.image("rsa_high_hw_encryption_hist.jpg")
plot(times, type="h", col="blue")
data<- read.csv2("ecc_random_messages.txt", header=T)
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
timesSorted <- head(sort(times),19800)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances",breaks="fd")
data<- read.csv2("ecc_random_messages.txt", header=T)
times <- as.numeric(levels(data$TIME))[data$TIME]
data<- read.csv2("ecc_random_messages.txt", header=T)
times <- as.numeric(levels(data$TIME))[data$TIME]
data<- read.csv2("ecc_random_messages.txt", header=T)
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
timesSorted <- head(sort(times),19800)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances",breaks="fd")
timesSorted <- head(sort(times),20000)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances",breaks="fd")
timesSorted <- head(sort(times),19900)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances",breaks="fd")
save.image("rsa_high_hw_encryption_hist.jpg")
plot(times, type="h", col="blue")
plot(times, type="h", col="blue")
data<- read.csv2("ecc_random_exp.txt", header=T)
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
timesSorted <- head(sort(times),19800)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances",breaks="fd")
save.image("rsa_high_hw_encryption_hist.jpg")
plot(times, type="h", col="blue")
data<- read.csv2("ecc_random_messages.txt", header=T)
times <- as.numeric(levels(data$TIME))[data$TIME]
times <- times[times < max(times)] / 1000000
timesSorted <- head(sort(times),19900)
hist(timesSorted, col="lightblue", main = "Histogram of time necessary to decrypt with high HW exp", xlab="time in ms", ylab="occurances",breaks="fd")
save.image("rsa_high_hw_encryption_hist.jpg")
plot(times, type="h", col="blue")
source("functions.r")
generateTimeHistogram("rsa_high_hw.txt",
"Histogram of time necessary for decryption (high HW exp, fixed message)",
"rsa_high_hw_exp.jpg")
source("functions.r")
generateTimeHistogram("rsa_high_hw.txt",
"Histogram of time necessary for decryption (high HW exp, fixed message)",
"rsa_high_hw_exp.jpg")
source("functions.r")
generateTimeHistogram("rsa_high_hw.txt",
"Histogram of time necessary for decryption (high HW exp, fixed message)",
"rsa_high_hw_exp.png")
source("functions.r")
generateTimeHistogram("rsa_high_hw.txt",
"Histogram of time necessary for decryption (high HW exp, fixed message)",
"rsa_high_hw_exp.png")
generateTimeHistogram("rsa_high_hw.txt",
"Histogram of time necessary for decryption (high HW exp, fixed message)",
"rsa_high_hw_exp_dec.png")
generateTimeHistogram("rsa_random_exp_dec.txt",
"Histogram of time necessary for decryption (random exp, fixed message)",
"rsa_random_exp_dec.png")
generateTimeHistogram("rsa_random_msg_dec.txt",
"Histogram of time necessary for decryption (random messages, fixed exponent)",
"rsa_random_messages_dec.png")
generateTimeHistogram("rsa_random_message_sig.txt",
"Histogram of time necessary for signature (random messages, fixed exponent)",
"rsa_random_messages_sig.png")
generateTimeHistogram("rsa_random_exp_sig.txt",
"Histogram of time necessary for signature (random exponent, fixed message)",
"rsa_random_exp_sig.png")
source("functions.r")
generateTimeHistogram("rsa_high_hw.txt",
"Histogram of time necessary for decryption (high HW exp, fixed message)",
"rsa_high_hw_exp_dec.png")
generateTimeHistogram("rsa_random_exp_dec.txt",
"Histogram of time necessary for decryption (random exp, fixed message)",
"rsa_random_exp_dec.png")
generateTimeHistogram("rsa_random_msg_dec.txt",
"Histogram of time necessary for decryption (random messages, fixed exponent)",
"rsa_random_messages_dec.png")
generateTimeHistogram("rsa_random_message_sig.txt",
"Histogram of time necessary for signature (random messages, fixed exponent)",
"rsa_random_messages_sig.png")
generateTimeHistogram("rsa_random_exp_sig.txt",
"Histogram of time necessary for signature (random exponent, fixed message)",
"rsa_random_exp_sig.png")
generateTimeHistogram("rsa_random_exp_dec.txt",
"Histogram of time necessary for decryption (random exp, fixed message)",
"rsa_random_exp_dec.png")
generateTimeHistogram("rsa_random_exp_dec.txt",
"Histogram of time necessary for decryption (random exp, fixed message)",
"rsa_random_exp_dec.png")
source("functions.r")
generateTimeHistogram("rsa_high_hw.txt",
"Histogram of time necessary for decryption (high HW exp, fixed message)",
"rsa_high_hw_exp_dec.png")
generateTimeHistogram("rsa_random_exp_dec.txt",
"Histogram of time necessary for decryption (random exp, fixed message)",
"rsa_random_exp_dec.png")
source("functions.r")
generateTimeHistogram("rsa_high_hw.txt",
"Histogram of time necessary for decryption (high HW exp, fixed message)",
"rsa_high_hw_exp_dec.png")
generateTimeHistogram("rsa_random_exp_dec.txt",
"Histogram of time necessary for decryption (random exp, fixed message)",
"rsa_random_exp_dec.png")
generateTimeHistogram("rsa_random_msg_dec.txt",
"Histogram of time necessary for decryption (random messages, fixed exponent)",
"rsa_random_messages_dec.png")
generateTimeHistogram("rsa_random_message_sig.txt",
"Histogram of time necessary for signature (random messages, fixed exponent)",
"rsa_random_messages_sig.png")
generateTimeHistogram("rsa_random_exp_sig.txt",
"Histogram of time necessary for signature (random exponent, fixed message)",
"rsa_random_exp_sig.png")
generateTimeHistogram("rsa_random_exp_sig.txt",
"Histogram of time necessary for signature (random exponent, fixed message)",
"rsa_random_exp_sig.png")
generateTimeHistogram("rsa_random_message_sig.txt",
"Histogram of time necessary for signature (random messages, fixed exponent)",
"rsa_random_messages_sig.png")
generateTimeHistogram("rsa_random_message_sig.txt",
"Histogram of time necessary for signature (random messages, fixed exponent)",
"rsa_random_messages_sig.png")
generateTimeHistogram("rsa_high_hw.txt",
"Histogram of time necessary for decryption (high HW exp, fixed message)",
"rsa_high_hw_exp_dec.png")
generateTimeHistogram("rsa_random_exp_dec.txt",
"Histogram of time necessary for decryption (random exp, fixed message)",
"rsa_random_exp_dec.png")
generateTimeHistogram("rsa_random_msg_dec.txt",
"Histogram of time necessary for decryption (random messages, fixed exponent)",
"rsa_random_messages_dec.png")
generateTimeHistogram("rsa_random_message_sig.txt",
"Histogram of time necessary for signature (random messages, fixed exponent)",
"rsa_random_messages_sig.png")
generateTimeHistogram("rsa_random_exp_sig.txt",
"Histogram of time necessary for signature (random exponent, fixed message)",
"rsa_random_exp_sig.png")
generateTimeHistogram("rsa_random_message_sig.txt",
"Histogram of time necessary for signature (random messages, fixed exponent)",
"rsa_random_messages_sig.png")
generateTimeHistogram("rsa_random_exp_sig.txt",
"Histogram of time necessary for signature (random exponent, fixed message)",
"rsa_random_exp_sig.png")
generateTimeHistogram("rsa_random_message_sig.txt",
"Histogram of time necessary for signature (random messages, fixed exponent)",
"rsa_random_messages_sig.png")
three_graphs <- function(file1, file2, file3, titleString, output) {
data1 <- read.csv2(file1, header=T)
data2 <- read.csv2(file1, header=T)
data3 <- read.csv2(file1, header=T)
times1 <- as.numeric(levels(data1$TIME))[data1$TIME]
times2 <- as.numeric(levels(data2$TIME))[data2$TIME]
times3 <- as.numeric(levels(data3$TIME))[data3$TIME]
times1 <- times1[times1 < max(times1)] / 1000000
times2 <- times2[times2 < max(times2)] / 1000000
times3 <- times3[times3 < max(times3)] / 1000000
timesSorted1 <- head(sort(times1),19900)
timesSorted2 <- head(sort(times2),19900)
timesSorted3 <- head(sort(times3),19900)
png(filename=output, width=1024, height=768)
p1 <- hist(timeSorted1)
p2 <- hist(timeSorted2)
p3 <- hist(timeSorted3)
plot(p1, col=rgb(0,0,1,1/4), xlim=c(minimal,maximal), main = titleString, xlab="time in ms")
plot(p2, col=rgb(0,1,0,1/4), xlim=c(minimal,maximal), add=T)
plot(p3, col=rgb(1,0,0,1/4), xlim=c(minimal,maximal), add=T)
dev.off()
}
source("functions.r")
three_graphs("rsa_random_exp_dex.txt", "rsa_high_hw_dec.txt", "rsa_low_hw_dec.txt", "histogram", "rsa_combined_exp.txt")
three_graphs("rsa_random_exp_dec.txt", "rsa_high_hw_dec.txt", "rsa_low_hw_dec.txt", "histogram", "rsa_combined_exp.txt")
source("functions.r")
three_graphs("rsa_random_exp_dec.txt", "rsa_high_hw_dec.txt", "rsa_low_hw_dec.txt", "histogram", "rsa_combined_exp.txt")
source("functions.r")
generateTimeHistogram("rsa_random_exp_sig.txt",
"Histogram of time necessary for signature (random exponent, fixed message)",
"rsa_random_exp_sig.png")
three_graphs("rsa_random_exp_dec.txt", "rsa_high_hw_dec.txt", "rsa_low_hw_dec.txt", "histogram", "rsa_combined_exp.txt")
three_graphs("rsa_random_exp_dec.txt", "rsa_high_hw_dec.txt", "rsa_low_hw_dec.txt", "histogram", "rsa_combined_exp.png")
source("functions.r")
three_graphs("rsa_random_exp_dec.txt", "rsa_high_hw_dec.txt", "rsa_low_hw_dec.txt", "histogram", "rsa_combined_exp.png")
source("functions.r")
three_graphs("rsa_random_exp_dec.txt", "rsa_high_hw_dec.txt", "rsa_low_hw_dec.txt", "histogram", "rsa_combined_exp.png")
source("functions.r")
three_graphs("rsa_random_exp_dec.txt", "rsa_high_hw_dec.txt", "rsa_low_hw_dec.txt", "histogram", "rsa_combined_exp.png")
source("functions.r")
three_graphs("rsa_random_exp_dec.txt", "rsa_high_hw_dec.txt", "rsa_low_hw_dec.txt", "histogram", "rsa_combined_exp.png")
file1 <- "rsa_random_exp_dec.txt"
file2 <- "rsa_high_hw_dec.txt"
file3 <- "rsa_low_hw_dec.txt"
data1 <- read.csv2(file1, header=T)
data2 <- read.csv2(file2, header=T)
data3 <- read.csv2(file3, header=T)
View(data2)
times1 <- as.numeric(levels(data1$TIME))[data1$TIME]
times2 <- as.numeric(levels(data2$TIME))[data2$TIME]
times3 <- as.numeric(levels(data3$TIME))[data3$TIME]
times1 <- times1[times1 < max(times1)] / 1000000
times2 <- times2[times2 < max(times2)] / 1000000
times3 <- times3[times3 < max(times3)] / 1000000
timeSorted1 <- head(sort(times1),19900)
timeSorted2 <- head(sort(times2),19900)
timeSorted3 <- head(sort(times3),19900)
p1 <- hist(timeSorted1, breaks="fd")
p2 <- hist(timeSorted2, breaks="fd")
p3 <- hist(timeSorted3, breaks="fd")
plot(p1, col=rgb(0,0,1,1/4), main = titleString, xlab="time in ms")
file1 <- "rsa_random_exp_dec.txt"
file2 <- "rsa_high_hw_dec.txt"
file3 <- "rsa_low_hw_dec.txt"
titleString <- "histos"
data1 <- read.csv2(file1, header=T)
data2 <- read.csv2(file2, header=T)
data3 <- read.csv2(file3, header=T)
times1 <- as.numeric(levels(data1$TIME))[data1$TIME]
times2 <- as.numeric(levels(data2$TIME))[data2$TIME]
times3 <- as.numeric(levels(data3$TIME))[data3$TIME]
times1 <- times1[times1 < max(times1)] / 1000000
times2 <- times2[times2 < max(times2)] / 1000000
times3 <- times3[times3 < max(times3)] / 1000000
timeSorted1 <- head(sort(times1),19900)
timeSorted2 <- head(sort(times2),19900)
timeSorted3 <- head(sort(times3),19900)
p1 <- hist(timeSorted1, breaks="fd")
p2 <- hist(timeSorted2, breaks="fd")
p3 <- hist(timeSorted3, breaks="fd")
plot(p1, col=rgb(0,0,1,1/4), main = titleString, xlab="time in ms")
plot(p2, col=rgb(0,1,0,1/4), add=T)
plot(p3, col=rgb(1,0,0,1/4), add=T)
plot(p1, col=rgb(0,0,1,1/4), main = titleString, xlab="time in ms")
plot(p2, col=rgb(0,1,0,1/4), add=T)
plot(p3, col=rgb(1,0,0,1/4), add=T)
hist(timeSorted1, breaks="fd")
hist(timeSorted1, breaks="fd")
p1 <- hist(timeSorted1, breaks="fd")
file1 <- "rsa_random_exp_dec.txt"
file2 <- "rsa_high_hw_dec.txt"
file3 <- "rsa_low_hw_dec.txt"
titleString <- "histos"
data1 <- read.csv2(file1, header=T)
data2 <- read.csv2(file2, header=T)
data3 <- read.csv2(file3, header=T)
times1 <- as.numeric(levels(data1$TIME))[data1$TIME]
times2 <- as.numeric(levels(data2$TIME))[data2$TIME]
times3 <- as.numeric(levels(data3$TIME))[data3$TIME]
times1 <- times1[times1 < max(times1)] / 1000000
times2 <- times2[times2 < max(times2)] / 1000000
times3 <- times3[times3 < max(times3)] / 1000000
timeSorted1 <- head(sort(times1),19900)
timeSorted2 <- head(sort(times2),19900)
timeSorted3 <- head(sort(times3),19900)
hist(timeSorted1, breaks="fd")
file1 <- "rsa_random_exp_dec.txt"
file2 <- "rsa_high_hw_dec.txt"
file3 <- "rsa_low_hw_dec.txt"
titleString <- "histos"
data1 <- read.csv2(file1, header=T)
data2 <- read.csv2(file2, header=T)
data3 <- read.csv2(file3, header=T)
times1 <- as.numeric(levels(data1$TIME))[data1$TIME]
times2 <- as.numeric(levels(data2$TIME))[data2$TIME]
times3 <- as.numeric(levels(data3$TIME))[data3$TIME]
times1 <- times1[times1 < max(times1)] / 1000000
times2 <- times2[times2 < max(times2)] / 1000000
times3 <- times3[times3 < max(times3)] / 1000000
timeSorted1 <- head(sort(times1),19900)
timeSorted2 <- head(sort(times2),19900)
timeSorted3 <- head(sort(times3),19900)
p1 <- hist(timeSorted1, breaks="fd")
p2 <- hist(timeSorted2, breaks="fd")
p3 <- hist(timeSorted3, breaks="fd")
plot(p1, col=rgb(0,0,1,1/4), main = titleString, xlab="time in ms")
plot(p2, col=rgb(0,1,0,1/4), add=T)
plot(p3, col=rgb(1,0,0,1/4), add=T)
hist(timeSorted1, breaks="fd")
hist(timeSorted2, breaks="fd")
hist(timeSorted3, breaks="fd")
hist(timeSorted1, col="lightblue", main = titleString, xlab="time in ms", ylab="occurances", breaks="fd")
source("functions.r")
# DECRYPT
random <- "rsa_random_exp_dec2.txt"
high <- "rsa_high_hw_dec.txt"
low <- "rsa_low_hw_dec.txt"
rsa_graphs(random, high,  low, "Comparison of times while using different exponents", "rsa_combined_exp.png")
